---
- name: "Configure Docker server(s)"
  hosts: "all"
  become: yes
  become_method: sudo

  vars:
    pip_install_packages:
      - name: docker
    docker_users: ["{{ ansible_user }}"]
    avahi__alias_enabled: True

    jenkins_version: lts
    jenkins_url: http://127.0.0.1
    jenkins_port: 8080
    jenkins_install_via: "docker"
    jenkins_include_secrets: false
    jenkins_java_opts: -Djenkins.install.runSetupWizard=false
    jenkins_config_owner: "jenkins"
    jenkins_config_group: "jenkins"
    jenkins_home: /var/jenkins_home
    jenkins_docker_image: jenkins/jenkins
    jenkins_docker_container_name: aswf_jenkins
    jenkins_docker_expose_port: false
    jenkins_source_dir_configs: "{{ playbook_dir }}/jenkins-configs"
    jenkins_source_config_xml: "{{ jenkins_source_dir_configs }}/config_pre_plugins.xml"
    jenkins_include_custom_files: true
    jenkins_custom_files:
      - src:  "hudson.plugins.git.GitSCM.xml"
        dest: "hudson.plugins.git.GitSCM.xml"
      - src:  "jenkins.model.JenkinsLocationConfiguration.xml"
        dest: "jenkins.model.JenkinsLocationConfiguration.xml"
      - src:  "jenkins.plugins.msginject.MsgInjectConfig.xml"
        dest: "jenkins.plugins.msginject.MsgInjectConfig.xml"
      - src:  "envinject-plugin-configuration.xml"
        dest: "envinject-plugin-configuration.xml"
      - src:  "jenkins.CLI.xml"
        dest: "jenkins.CLI.xml"
      - src:  "jenkins.model.DownloadSettings.xml"
        dest: "jenkins.model.DownloadSettings.xml"
      - src:  "jenkins.security.QueueItemAuthenticatorConfiguration.xml"
        dest: "jenkins.security.QueueItemAuthenticatorConfiguration.xml"
      - src:  "jenkins.security.UpdateSiteWarningsConfiguration.xml"
        dest: "jenkins.security.UpdateSiteWarningsConfiguration.xml"
      - src:  "jenkins.security.apitoken.ApiTokenPropertyConfiguration.xml"
        dest: "jenkins.security.apitoken.ApiTokenPropertyConfiguration.xml"
      - src:  "gerrit-trigger.xml"
        dest: "gerrit-trigger.xml"
      - src:  "hudson.model.UpdateCenter.xml"
        dest: "hudson.model.UpdateCenter.xml"
      - src:  "hudson.plugins.git.GitTool.xml"
        dest: "hudson.plugins.git.GitTool.xml"
      - src:  "nodeMonitors.xml"
        dest: "nodeMonitors.xml"
      - src:  "org.jenkinsci.plugins.ghprb.GhprbTrigger.xml"
        dest: "org.jenkinsci.plugins.ghprb.GhprbTrigger.xml"

    jenkins_plugins:
      - jdk-tool
      - command-launcher
      - antisamy-markup-formatter
      - build-timeout
      - config-file-provider
      - description-setter
      - envinject
      - extended-read-permission
      - git
      - postbuildscript
      - ssh-agent
      - ws-cleanup
      - gerrit-trigger
      - github
      - ghprb
      - mask-passwords
      - msginject
      - openstack-cloud
      - timestamper
      - matrix-auth
      - matrix-project

  roles:
    - role: debops.avahi
      tags: role::avahi
    - geerlingguy.pip
    - geerlingguy.docker

  tasks:
  - name: add CNAME avahi aliases
    # Can't use blockinfile, no comments in avahi aliases
    lineinfile:
      path: /etc/avahi/aliases
      line: '{{ item }}'
    with_items:
      - 'jenkins.local'
      - 'nexus.local'
      - 'nexus3.local'
      - 'sonar.local'
      - 'logs.local'

  - name: add NGINX proxy container
    docker_container:
      name: aswf_nginx
      image: jwilder/nginx-proxy
      published_ports:
        - 80:80
      restart_policy: unless-stopped
      volumes: /var/run/docker.sock:/tmp/docker.sock:ro

  - name: create jenkins user and group
    user:
      name: jenkins
      comment: Jenkins User
      home: /var/jenkins_home

  - name: add Jenkins container
    include_role:
      name: emmetog.jenkins

  - name: stop Jenkins container
    docker_container:
      name: aswf_jenkins
      state: stopped

  - name: recopy Jenkins config that depends on plugins being present
    copy:
      src: "{{ jenkins_source_dir_configs }}/config.xml"
      dest: "{{ jenkins_home }}/config.xml"
      owner: jenkins
      group: jenkins
      mode: 0644


  - name: restart Jenkins container as vhost
    docker_container:
      name: aswf_jenkins
      image: jenkins/jenkins:lts
      exposed_ports:
        - 8080
        - 50000
      restart_policy: unless-stopped
      volumes: "{{ jenkins_home }}:{{ jenkins_home }}"
      env:
        JAVA_OPTS: "{{ jenkins_java_opts }}"
        VIRTUAL_HOST: jenkins.local
        VIRTUAL_PORT: 8080

  - name: add Nexus2 container
    docker_container:
     name: aswf_nexus
     image: sonatype/nexus
     exposed_ports:
       - 8081
     restart_policy: unless-stopped
     env:
       VIRTUAL_HOST: nexus.local
       VIRTUAL_PORT: 8081

  - name: add Nexus3 container
    docker_container:
      name: aswf_nexus3
      image: sonatype/nexus3
      exposed_ports:
        - 8081
      restart_policy: unless-stopped
      env:
        VIRTUAL_HOST: nexus3.local
        VIRTUAL_PORT: 8081

  - name: add SonarQube container
    docker_container:
        name: aswf_sonar
        image: sonarqube
        exposed_ports:
          - 9000
          - 9092
        restart_policy: unless-stopped
        env:
          VIRTUAL_HOST: sonar.local
          VIRTUAL_PORT: 9000
          SONARQUBE_JDBC_USERNAME: sonar
          SONARQUBE_JDBC_PASSWORD: sonar
          SONARQUBE_JDBC_URL: jdbc:postgresql://localhost/sonar

